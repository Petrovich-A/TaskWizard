openapi: 3.0.3
info:
  title: Task Management System API
  description: |-
    This is a Task Management System API built with Java and Spring.
    The system provides functionality for creating, editing, deleting, and viewing tasks with authentication and authorization via JWT tokens.
    
    Features:
    - User authentication and authorization
    - Role-based access control (Admin and User roles)
    - Task management with status tracking, priorities, and comments
    - Filtering and pagination for task retrieval
    - Comprehensive error handling and input validation
    
    Roles:
    - Admin: Full access to all tasks and user management
    - User: Access to own tasks and tasks where assigned as executor
    
    Authentication: All endpoints (except login/register) require JWT token in Authorization header.
  version: 1.0.0
  contact:
    email: support@taskmanagement.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

externalDocs:
  description: API Documentation
  url: https://github.com/Petrovich-A/TaskWizard

servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://api.taskmanagement.com/v1
    description: Production server

paths:
  /auth/sign-up:
    post:
      tags:
        - Registration
      summary: Register new user
      description: Create a new user account
      operationId: signUp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'

            examples:
              # valid
              validUser1:
                summary: Valid user registration
                value:
                  userName: "john_doe"
                  email: "john.doe@example.com"
                  password: "securePassword123"

              validUser2:
                summary: Another valid user registration
                value:
                  userName: "frank_example"
                  email: "frank@example.com"
                  password: "Fr@nk2025*Pwd!"

              # invalid
              invalidUserNameTooShort:
                summary: User name too short
                value:
                  userName: "jd"
                  email: "user@example.com"
                  password: "validPassword123"

              invalidEmailFormat:
                summary: Malformed email address
                value:
                  userName: "john_doe"
                  email: "not-an-email"
                  password: "securePassword123"

              missingPassword:
                summary: Password field missing
                value:
                  userName: "jane_doe"
                  email: "jane@example.com"

              passwordTooWeak:
                summary: Password does not meet strength requirements
                value:
                  userName: "weak_password_user"
                  email: "weak@example.com"
                  password: "123"

              duplicateEmail:
                summary: Email already in use
                value:
                  userName: "duplicate_user"
                  email: "carol@example.com"
                  password: "securePassword123"

              emptyFields:
                summary: All fields are empty
                value:
                  userName: ""
                  email: ""
                  password: ""

      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/sign-in:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      operationId: signIn
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInRequest'
            examples:
              # valid
              admin1:
                summary: Admin user login 1
                value:
                  email: "alice@example.com"
                  password: "A1!s#9xPqZwef)l;jkwef19087"

              regularUser6:
                summary: Regular user Bob 6
                value:
                  email: "bob@example.com"
                  password: "B0b$Tr0ngP@ss"

              regularUser11:
                summary: Regular user Carol 11
                value:
                  email: "carol@example.com"
                  password: "C@r0l#2025!"

              regularUser16:
                summary: Regular user Dave 16
                value:
                  email: "dave@example.com"
                  password: "D4v3*Secure*Pwd"

              regularUser21:
                summary: Regular user Eve 21
                value:
                  email: "eve@example.com"
                  password: "Ev3!P@ssw0rd#"

              regularUser2:
                summary: Regular user Frank
                value:
                  email: "frank@example.com"
                  password: "Fr@nk2025*Pwd!"

              regularUser3:
                summary: After sign-up User John
                value:
                  email: "john.doe@example.com"
                  password: "securePassword123"

              # invalid
              invalidPassword:
                summary: Wrong password
                value:
                  email: "eve@example.com"
                  password: "wrongpassword123"

              userNotFound:
                summary: Non-existent user
                value:
                  email: "nonexistent@example.com"
                  password: "anypassword123"

              emptyCredentials:
                summary: Empty email and password
                value:
                  email: ""
                  password: ""

              invalidEmailFormat:
                summary: Malformed email address
                value:
                  email: "not-an-email"
                  password: "somepassword123"

              missingPassword:
                summary: Password field missing
                value:
                  email: "john.doe@example.com"

              missingEmail:
                summary: Email field missing
                value:
                  password: "securePassword123"

              passwordNotMatchToExist:
                summary: Password does not match the existing one
                value:
                  email: "carol@example.com"
                  password: "C@r0l#20021"

      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtAuthResponse'

        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_input:
                  $ref: '#/components/examples/ErrorResponseInvalidInputExample'

        '401':
          description: Unauthorized - bad credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorized:
                  $ref: '#/components/examples/ErrorResponseUnauthorizedExample'
                bad_credentials:
                  $ref: '#/components/examples/ErrorResponseBadCredentialsExample'

        '404':
          description: User not found during authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                user_not_found:
                  $ref: '#/components/examples/ErrorResponseUserNotFoundDuringAuthenticationExample'

  #tasks

  /task/tasks:
    get:
      tags:
        - Tasks
      summary: Get paginated list of tasks
      description: Retrieve all tasks with pagination. Accessible by USER and ADMIN roles.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 3
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageTaskResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorized:
                  $ref: '#/components/examples/ErrorResponseUnauthorizedExample'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /task/sort:
    get:
      tags:
        - Tasks
      summary: Get sorted list of tasks
      description: Retrieve all tasks sorted by specified field and direction. Accessible by USER and ADMIN roles.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: sortDirection
          in: query
          description: Sort direction (ASC or DESC)
          required: false
          schema:
            type: string
            enum: [ ASC, DESC ]
            default: ASC
        - name: sortBy
          in: query
          description: Field to sort by
          required: false
          schema:
            type: string
            default: id
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Invalid sort direction
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorized:
                  $ref: '#/components/examples/ErrorResponseUnauthorizedExample'
        '403':
          description: Forbidden

  /task/{id}:
    get:
      tags:
        - Tasks
      summary: Get task by ID
      description: Retrieve a specific task by its ID. Accessible by USER and ADMIN roles.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '404':
          description: Task not found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorized:
                  $ref: '#/components/examples/ErrorResponseUnauthorizedExample'
        '403':
          description: Forbidden

  /task/author/{authorId}:
    get:
      tags:
        - Tasks
      summary: Get tasks by author
      description: Retrieve tasks created by a specific author with pagination. Accessible by USER and ADMIN roles.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 3
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageTaskResponse'
        '404':
          description: Author not found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorized:
                  $ref: '#/components/examples/ErrorResponseUnauthorizedExample'
        '403':
          description: Forbidden

  /task/assignee/{assigneeId}:
    get:
      tags:
        - Tasks
      summary: Get tasks by assignee
      description: Retrieve tasks assigned to a specific user with pagination. Accessible by USER and ADMIN roles.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: assigneeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 3
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageTaskResponse'
        '404':
          description: Assignee not found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorized:
                  $ref: '#/components/examples/ErrorResponseUnauthorizedExample'
        '403':
          description: Forbidden

  /task/:
    post:
      tags:
        - Tasks
      summary: Create new task
      description: Create a new task. Accessible only by ADMIN role.
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorized:
                  $ref: '#/components/examples/ErrorResponseUnauthorizedExample'
        '403':
          description: Forbidden

    put:
      tags:
        - Tasks
      summary: Update task
      description: Update an existing task. Accessible only by ADMIN role.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Invalid input data
        '404':
          description: Task not found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorized:
                  $ref: '#/components/examples/ErrorResponseUnauthorizedExample'
        '403':
          description: Forbidden

    delete:
      tags:
        - Tasks
      summary: Delete task
      description: Delete a task. Accessible only by ADMIN role.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '204':
          description: Task deleted successfully
        '404':
          description: Task not found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorized:
                  $ref: '#/components/examples/ErrorResponseUnauthorizedExample'
        '403':
          description: Forbidden

  /task/{id}/status:
    patch:
      tags:
        - Tasks
      summary: Update task status
      description: |
        Update the status of a task status. Accessible by USER and ADMIN roles.
        - Users can update task status only for their own tasks (where they are assigned as executor)
        - Admins can update task status for any task
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 11
        - name: statusId
          in: query
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 1
      responses:
        '200':
          description: Status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '404':
          description: Task or status not found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorized:
                  $ref: '#/components/examples/ErrorResponseUnauthorizedExample'
        '403':
          description: Forbidden

  /task/{id}/priority:
    patch:
      tags:
        - Tasks
      summary: Update task priority
      description: |
        Update the status of a task. Accessible by USER and ADMIN roles.
        - Users can update task priority only for their own tasks (where they are assigned as executor)
        - Admins can update task priority for any task
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 1
        - name: priorityId
          in: query
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 3
      responses:
        '200':
          description: Priority updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '404':
          description: Task or priority not found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorized:
                  $ref: '#/components/examples/ErrorResponseUnauthorizedExample'
        '403':
          description: Forbidden

  /task/{id}/author:
    patch:
      tags:
        - Tasks
      summary: Update task author
      description: Update the author of a task. Accessible only by ADMIN role.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: authorId
          in: query
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Author updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '404':
          description: Task or author not found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorized:
                  $ref: '#/components/examples/ErrorResponseUnauthorizedExample'
        '403':
          description: Forbidden

  /task/{id}/assignee:
    patch:
      tags:
        - Tasks
      summary: Update task assignee
      description: Update the assignee of a task. Accessible only by ADMIN role.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: assigneeId
          in: query
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Assignee updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '404':
          description: Task or assignee not found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorized:
                  $ref: '#/components/examples/ErrorResponseUnauthorizedExample'
        '403':
          description: Forbidden

  # comments

  /comment/comments:
    get:
      tags:
        - Comments
      summary: Get all comments
      description: Retrieve all comments with sorting options. Accessible by USER and ADMIN roles.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: sortDirection
          in: query
          description: Sort direction (ASC or DESC)
          required: false
          schema:
            type: string
            enum: [ ASC, DESC ]
            default: ASC
        - name: sortBy
          in: query
          description: Field to sort by (id, createdAt, etc.)
          required: false
          schema:
            type: string
            default: id
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskCommentResponseDto'
        '400':
          description: Invalid sort parameters
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /comment/{id}:
    get:
      tags:
        - Comments
      summary: Get comment by ID
      description: Retrieve a specific comment by its ID. Accessible by USER and ADMIN roles.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskCommentResponseDto'
        '404':
          description: Comment not found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    delete:
      tags:
        - Comments
      summary: Delete comment
      description: Delete a comment. Accessible by USER and ADMIN roles (users can only delete their own comments).
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "Comment deleted"
        '404':
          description: Comment not found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /comment:
    post:
      tags:
        - Comments
      summary: Create new comment
      description: Create a new comment for a task. Accessible by USER and ADMIN roles.
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCommentRequestDto'
            examples:
              validComment:
                summary: Valid comment creation
                value:
                  comment: "This task is progressing well"
                  taskId: 1
                  authorId: 2
              invalidComment:
                summary: Comment too long
                value:
                  comment: "This is a very long comment that exceeds the maximum allowed length of 200 characters and therefore should trigger a validation error when submitted to the server for processing"
                  taskId: 1
                  authorId: 2
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskCommentResponseDto'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task or author not found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  # priorities

  /priority/priorities:
    get:
      tags:
        - Task Priorities
      summary: Get all task priorities
      description: Retrieve all task priorities with sorting options
      parameters:
        - name: sortDirection
          in: query
          description: Sort direction (ASC or DESC)
          required: false
          schema:
            type: string
            enum: [ ASC, DESC ]
            default: ASC
        - name: sortBy
          in: query
          description: Field to sort by (id, name)
          required: false
          schema:
            type: string
            default: id
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskPriorityResponseDto'
        '400':
          description: Invalid sort parameters

  /priority/{id}:
    get:
      tags:
        - Task Priorities
      summary: Get task priority by ID
      description: Retrieve a specific task priority by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskPriorityResponseDto'
        '404':
          description: Task priority not found
    put:
      tags:
        - Task Priorities
      summary: Update task priority
      description: Update an existing task priority
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskPriorityRequestDto'
      responses:
        '200':
          description: Task priority updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskPriorityResponseDto'
        '400':
          description: Invalid input data
        '404':
          description: Task priority not found
    delete:
      tags:
        - Task Priorities
      summary: Delete task priority
      description: Delete a task priority
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Task priority deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "Task priority deleted"
        '404':
          description: Task priority not found

  /priority:
    post:
      tags:
        - Task Priorities
      summary: Create new task priority
      description: Create a new task priority
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskPriorityRequestDto'
      responses:
        '201':
          description: Task priority created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskPriorityResponseDto'
        '400':
          description: Invalid input data

  # statuses

  /status/statuses:
    get:
      tags:
        - Task Statuses
      summary: Get all task statuses
      description: Retrieve all task statuses with sorting options
      parameters:
        - name: sortDirection
          in: query
          description: Sort direction (ASC or DESC)
          required: false
          schema:
            type: string
            enum: [ ASC, DESC ]
            default: ASC
        - name: sortBy
          in: query
          description: Field to sort by (id, name, updatedAt)
          required: false
          schema:
            type: string
            default: id
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskStatusResponseDto'
        '400':
          description: Invalid sort parameters

  /status/{id}:
    get:
      tags:
        - Task Statuses
      summary: Get task status by ID
      description: Retrieve a specific task status by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatusResponseDto'
        '404':
          description: Task status not found
    put:
      tags:
        - Task Statuses
      summary: Update task status
      description: Update an existing task status
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskStatusRequestDto'
      responses:
        '200':
          description: Task status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatusResponseDto'
        '400':
          description: Invalid input data
        '404':
          description: Task status not found
    delete:
      tags:
        - Task Statuses
      summary: Delete task status
      description: Delete a task status
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Task status deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "Task status deleted"
        '404':
          description: Task status not found

  /status:
    post:
      tags:
        - Task Statuses
      summary: Create new task status
      description: Create a new task status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskStatusRequestDto'
      responses:
        '201':
          description: Task status created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatusResponseDto'
        '400':
          description: Invalid input data

  # users

  /user/users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve all users with sorting options
      parameters:
        - name: sortDirection
          in: query
          description: Sort direction (ASC or DESC)
          required: false
          schema:
            type: string
            enum: [ ASC, DESC ]
            default: ASC
        - name: sortBy
          in: query
          description: Field to sort by (id, email, name, createdAt, updatedAt)
          required: false
          schema:
            type: string
            default: id
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: Invalid sort parameters

  /user/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '404':
          description: User not found
    put:
      tags:
        - Users
      summary: Update user
      description: Update an existing user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDto'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: Invalid input data
        '404':
          description: User not found
    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "User deleted"
        '404':
          description: User not found

  /user/by-email/{email}:
    get:
      tags:
        - Users
      summary: Get user by email
      description: Retrieve a specific user by email address
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
            example: "user@example.com"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '404':
          description: User not found

  /user:
    post:
      tags:
        - Users
      summary: Create new user
      description: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDto'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: Invalid input data
        '409':
          description: User with this email already exists


components:
  schemas:
    SignUpRequest:
      type: object
      required:
        - userName
        - email
        - password
      properties:
        userName:
          type: string
          minLength: 3
          maxLength: 30
          example: "john_doe"
          description: User's username (3-30 characters)
        email:
          type: string
          format: email
          maxLength: 50
          example: "john.doe@example.com"
          description: User's email address
        password:
          type: string
          minLength: 8
          maxLength: 255
          example: "securePassword123"
          description: User's password (8-255 characters)

    SignInRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
          description: User's registered email
        password:
          type: string
          minLength: 8
          example: "securePassword123"
          description: User's password

    JwtAuthResponse:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 1
          description: User ID
        accessToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          description: JWT access token for authentication
        email:
          type: string
          example: "john.doe@example.com"
          description: User's email
        name:
          type: string
          example: "john_doe"
          description: User's name
        roles:
          type: array
          items:
            type: string
            enum: [ ROLE_ADMIN, ROLE_USER ]
          example: [ "ROLE_USER" ]
          description: User roles

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: User ID
        email:
          type: string
          example: "john.doe@example.com"
          description: User's email
        name:
          type: string
          example: "john_doe"
          description: User's name
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15 10:30:00"
          description: User creation timestamp
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15 10:30:00"
          description: Last update timestamp
        authoredTaskIds:
          type: array
          items:
            type: integer
            format: int64
          example: [ ]
          description: IDs of tasks created by this user
        assignedTaskIds:
          type: array
          items:
            type: integer
            format: int64
          example: [ ]
          description: IDs of tasks assigned to this user
        roles:
          type: array
          items:
            type: string
            enum: [ ROLE_ADMIN, ROLE_USER ]
          example: [ "ROLE_USER" ]
          description: User roles

    TaskRequest:
      type: object
      required:
        - title
        - description
        - taskStatusId
        - taskPriorityId
        - authorId
      properties:
        title:
          type: string
          maxLength: 50
          example: "Implement user authentication"
          description: Task title
        description:
          type: string
          maxLength: 350
          example: "Implement JWT-based authentication system with Spring Security"
          description: Task description
        taskStatusId:
          type: integer
          format: int64
          example: 1
          description: ID of the task status
        taskPriorityId:
          type: integer
          format: int64
          example: 2
          description: ID of the task priority
        authorId:
          type: integer
          format: int64
          example: 1
          description: ID of the task author
        assigneeId:
          type: integer
          format: int64
          nullable: true
          example: 2
          description: ID of the task assignee (optional)

    TaskResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: Task ID
        title:
          type: string
          example: "Implement user authentication"
          description: Task title
        description:
          type: string
          example: "Implement JWT-based authentication system with Spring Security"
          description: Task description
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15 10:30:00"
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15 11:45:00"
          description: Last update timestamp
        status:
          type: string
          example: "IN_PROGRESS"
          description: Task status name
        priority:
          type: string
          example: "HIGH"
          description: Task priority name
        author:
          type: string
          example: "john_doe"
          description: Author username
        assignee:
          type: string
          nullable: true
          example: "jane_smith"
          description: Assignee username
        comments:
          type: array
          items:
            $ref: '#/components/schemas/TaskCommentResponse'
          description: List of task comments

    TaskCommentResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: Comment ID
        content:
          type: string
          example: "This task is progressing well"
          description: Comment content
        author:
          type: string
          example: "john_doe"
          description: Comment author username
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T12:00:00Z"
          description: Comment creation timestamp

    PageTaskResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/TaskResponse'
          description: Page content
        totalElements:
          type: integer
          format: int64
          example: 25
          description: Total number of elements
        totalPages:
          type: integer
          format: int32
          example: 9
          description: Total number of pages
        size:
          type: integer
          format: int32
          example: 3
          description: Number of elements per page
        number:
          type: integer
          format: int32
          example: 0
          description: Current page number (0-based)
        first:
          type: boolean
          example: true
          description: Is first page
        last:
          type: boolean
          example: false
          description: Is last page
        numberOfElements:
          type: integer
          format: int32
          example: 3
          description: Number of elements in current page
        empty:
          type: boolean
          example: false
          description: Is page empty

    RoleResponse:
      type: object
      description: Role entity representing user roles in the system.
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the role (auto-generated).
          example: 1
          readOnly: true
        name:
          type: string
          description: Name of the role (e.g., ADMIN, USER).
          example: "USER"
      required:
        - name

    # errors

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15 10:30:00"
          description: Error timestamp
        status:
          type: integer
          example: 400
          description: HTTP status code
        error:
          type: string
          example: "Bad Request"
          description: Error type
        message:
          type: string
          example: "Validation failed"
          description: Error message
        path:
          type: string
          example: "/auth/sign-up"
          description: Request path
        errors:
          type: array
          items:
            type: string
          example: [ "Password must be at least 8 characters long" ]
          description: Detailed error messages

    TaskCommentRequestDto:
      type: object
      required:
        - comment
        - taskId
        - authorId
      properties:
        comment:
          type: string
          maxLength: 200
          example: "This task is progressing well"
          description: Comment content (max 200 characters)
        taskId:
          type: integer
          format: int64
          minimum: 1
          example: 1
          description: ID of the task
        authorId:
          type: integer
          format: int64
          minimum: 1
          example: 2
          description: ID of the comment author

    TaskCommentResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: Comment ID
        comment:
          type: string
          example: "This task is progressing well"
          description: Comment content
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15 12:00:00"
          description: Comment creation timestamp
        author:
          type: string
          example: "john_doe"
          description: Comment author username
        taskId:
          type: integer
          format: int64
          example: 1
          description: ID of the task


    TaskPriorityRequestDto:
      type: object
      required:
        - name
        - taskId
        - authorId
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          example: 1
          description: Task priority ID (optional for create, required for update)
        name:
          type: string
          maxLength: 30
          example: "High"
          description: Priority name
        taskId:
          type: integer
          format: int64
          minimum: 1
          example: 1
          description: ID of the task
        authorId:
          type: integer
          format: int64
          minimum: 1
          example: 2
          description: ID of the author

    TaskPriorityResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: Task priority ID
        name:
          type: string
          example: "High"
          description: Priority name


    TaskStatusRequestDto:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          example: 1
          description: Task status ID (optional for create, required for update)
        name:
          type: string
          maxLength: 30
          example: "In Progress"
          description: Status name

    TaskStatusResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: Task status ID
        name:
          type: string
          example: "In Progress"
          description: Status name
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15 10:30:00"
          description: Last update timestamp

    # users

    UserRequestDto:
      type: object
      required:
        - email
        - password
        - name
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          example: 1
          description: User ID (optional for create, required for update)
        email:
          type: string
          format: email
          maxLength: 50
          example: "user@example.com"
          description: User email address
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 255
          example: "password123"
          description: User password
        name:
          type: string
          maxLength: 30
          example: "John Doe"
          description: User full name
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleResponse'
          description: User roles

    UserResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: User ID
        email:
          type: string
          example: "user@example.com"
          description: User email address
        name:
          type: string
          example: "John Doe"
          description: User full name
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15 10:30:00"
          description: User creation timestamp
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15 10:30:00"
          description: Last update timestamp
        authoredTaskIds:
          type: array
          items:
            type: integer
            format: int64
          example: [ 1, 2, 3 ]
          description: IDs of tasks authored by this user
        assignedTaskIds:
          type: array
          items:
            type: integer
            format: int64
          example: [ 4, 5, 6 ]
          description: IDs of tasks assigned to this user
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleResponse'
          description: User roles

  # examples

  examples:
    ErrorResponseUnauthorizedExample:
      summary: Example of general unauthorized
      value:
        type: "/errors/unauthorized"
        title: "unauthorized"
        status: 401
        detail: "Access is denied. Authorization is required."
        instance: "/api/v1/auth/sign-in"
        timestamp: "2025-09-04 19:10:01"

    ErrorResponseInvalidInputExample:
      summary: Example of invalid input
      value:
        type: "/errors/invalid_input"
        title: "invalid input"
        status: 400
        detail: "Some field is invalid."
        instance: "/api/v1/auth/sign-in"
        timestamp: "2025-09-04 19:30:00"

    ErrorResponseBadCredentialsExample:
      summary: Example of bad credentials
      value:
        type: "/errors/bad_credentials"
        title: "bad credentials"
        status: 401
        detail: "Authentication failed. Please check your credentials."
        instance: "/api/v1/auth/sign-in"
        timestamp: "2025-09-04 19:27:36"

    ErrorResponseUserNotFoundDuringAuthenticationExample:
      summary: Example of user not found during authentication
      value:
        type: "/errors/user_not_found_during_authentication"
        title: "user not found during authentication"
        status: 404
        detail: "Authentication failed: User not found with email: user@example.com."
        instance: "/api/v1/auth/sign-in"
        timestamp: "2025-09-04 19:21:22"


  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: [ ]

tags:
  - name: Registration
    description: User registration
  - name: Authentication
    description: User authentication, registration and token management
  - name: Tasks
    description: Create, read, update and delete tasks with filtering and sorting
  - name: Comments
    description: Manage task comments - create, edit, delete and retrieve comments
  - name: Task Priorities
    description: System task priority levels management and configuration
  - name: Task Statuses
    description: Task workflow status management and state transitions
  - name: Users
    description: User account management, profiles and permissions



